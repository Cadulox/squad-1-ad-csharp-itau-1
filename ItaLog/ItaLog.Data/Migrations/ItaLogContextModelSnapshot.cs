// <auto-generated />
using System;
using ItaLog.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ItaLog.Data.Migrations
{
    [DbContext(typeof(ItaLogContext))]
    partial class ItaLogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ItaLog.Domain.Models.ApiRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ApiRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("ItaLog.Domain.Models.ApiUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<Guid>("UserToken")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ApiUser");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2020, 4, 27, 0, 9, 18, 961, DateTimeKind.Local).AddTicks(566),
                            Email = "admin@contato.com",
                            EmailConfirmed = true,
                            LastUpdateDate = new DateTime(2020, 4, 27, 0, 9, 18, 962, DateTimeKind.Local).AddTicks(2053),
                            Name = "Admin",
                            NormalizedUserName = "ADMIN@CONTATO.COM",
                            Password = "AQAAAAEAACcQAAAAENiU++GjfU7q1nAIgwulJmL319Hj8DHBCiiag198T1yUIOSQusFnjpQDjdYZuxjCPw==",
                            UserName = "admin@contato.com",
                            UserToken = new Guid("8a74affc-f625-451f-9ea7-651980e87fdc")
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2020, 4, 27, 0, 9, 18, 962, DateTimeKind.Local).AddTicks(2868),
                            Email = "itau@contato.com",
                            EmailConfirmed = true,
                            LastUpdateDate = new DateTime(2020, 4, 27, 0, 9, 18, 962, DateTimeKind.Local).AddTicks(2886),
                            Name = "Itau",
                            NormalizedUserName = "ITAU@CONTATO.COM",
                            Password = "AQAAAAEAACcQAAAAENiU++GjfU7q1nAIgwulJmL319Hj8DHBCiiag198T1yUIOSQusFnjpQDjdYZuxjCPw==",
                            UserName = "itau@contato.com",
                            UserToken = new Guid("a677d9b6-37df-4863-9759-2730e3c45023")
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2020, 4, 27, 0, 9, 18, 962, DateTimeKind.Local).AddTicks(2899),
                            Email = "afonso@contato.com",
                            EmailConfirmed = true,
                            LastUpdateDate = new DateTime(2020, 4, 27, 0, 9, 18, 962, DateTimeKind.Local).AddTicks(2900),
                            Name = "Afonso",
                            NormalizedUserName = "AFONSO@CONTATO.COM",
                            Password = "AQAAAAEAACcQAAAAENiU++GjfU7q1nAIgwulJmL319Hj8DHBCiiag198T1yUIOSQusFnjpQDjdYZuxjCPw==",
                            UserName = "afonso@contato.com",
                            UserToken = new Guid("719a5a86-51a4-4680-b3b0-36bb6043d0bf")
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2020, 4, 27, 0, 9, 18, 962, DateTimeKind.Local).AddTicks(2903),
                            Email = "andre@contato.com",
                            EmailConfirmed = true,
                            LastUpdateDate = new DateTime(2020, 4, 27, 0, 9, 18, 962, DateTimeKind.Local).AddTicks(2905),
                            Name = "André",
                            NormalizedUserName = "ANDRE@CONTATO.COM",
                            Password = "AQAAAAEAACcQAAAAENiU++GjfU7q1nAIgwulJmL319Hj8DHBCiiag198T1yUIOSQusFnjpQDjdYZuxjCPw==",
                            UserName = "andre@contato.com",
                            UserToken = new Guid("15fad97a-54fc-4f93-94c3-5761570a9a53")
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2020, 4, 27, 0, 9, 18, 962, DateTimeKind.Local).AddTicks(2908),
                            Email = "brunna@contato.com",
                            EmailConfirmed = true,
                            LastUpdateDate = new DateTime(2020, 4, 27, 0, 9, 18, 962, DateTimeKind.Local).AddTicks(2909),
                            Name = "Brunna",
                            NormalizedUserName = "BRUNNA@CONTATO.COM",
                            Password = "AQAAAAEAACcQAAAAENiU++GjfU7q1nAIgwulJmL319Hj8DHBCiiag198T1yUIOSQusFnjpQDjdYZuxjCPw==",
                            UserName = "brunna@contato.com",
                            UserToken = new Guid("2dc18d4a-4c26-4e25-ab3e-12b3e2cee373")
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2020, 4, 27, 0, 9, 18, 962, DateTimeKind.Local).AddTicks(2913),
                            Email = "bruno@contato.com",
                            EmailConfirmed = true,
                            LastUpdateDate = new DateTime(2020, 4, 27, 0, 9, 18, 962, DateTimeKind.Local).AddTicks(2914),
                            Name = "Bruno",
                            NormalizedUserName = "BRUNO@CONTATO.COM",
                            Password = "AQAAAAEAACcQAAAAENiU++GjfU7q1nAIgwulJmL319Hj8DHBCiiag198T1yUIOSQusFnjpQDjdYZuxjCPw==",
                            UserName = "bruno@contato.com",
                            UserToken = new Guid("50b97946-a456-4d85-990f-57504def02d9")
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2020, 4, 27, 0, 9, 18, 962, DateTimeKind.Local).AddTicks(2918),
                            Email = "carlos@contato.com",
                            EmailConfirmed = true,
                            LastUpdateDate = new DateTime(2020, 4, 27, 0, 9, 18, 962, DateTimeKind.Local).AddTicks(2919),
                            Name = "Carlos",
                            NormalizedUserName = "CARLOS@CONTATO.COM",
                            Password = "AQAAAAEAACcQAAAAENiU++GjfU7q1nAIgwulJmL319Hj8DHBCiiag198T1yUIOSQusFnjpQDjdYZuxjCPw==",
                            UserName = "carlos@contato.com",
                            UserToken = new Guid("70cfe502-06b1-41f6-8b82-c9b1a0aaa580")
                        });
                });

            modelBuilder.Entity("ItaLog.Domain.Models.ApiUserRole", b =>
                {
                    b.Property<int>("ApiUserId")
                        .HasColumnType("int");

                    b.Property<int>("ApiRoleId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("ApiUserId", "ApiRoleId");

                    b.HasIndex("ApiRoleId");

                    b.ToTable("ApiUserRole");
                });

            modelBuilder.Entity("ItaLog.Domain.Models.Environment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Environment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Production"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Homologation"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Development"
                        });
                });

            modelBuilder.Entity("ItaLog.Domain.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("varchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("ErrorDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LogId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LogId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("ItaLog.Domain.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Level");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Debug"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Warning"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Error"
                        });
                });

            modelBuilder.Entity("ItaLog.Domain.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApiUserId")
                        .HasColumnType("int");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<int>("EnvironmentId")
                        .HasColumnType("int");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ApiUserId");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("LevelId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("ItaLog.Domain.Models.ApiUserRole", b =>
                {
                    b.HasOne("ItaLog.Domain.Models.ApiRole", "ApiRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("ApiRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItaLog.Domain.Models.ApiUser", "ApiUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("ApiUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItaLog.Domain.Models.Event", b =>
                {
                    b.HasOne("ItaLog.Domain.Models.Log", "Log")
                        .WithMany("Events")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItaLog.Domain.Models.Log", b =>
                {
                    b.HasOne("ItaLog.Domain.Models.ApiUser", "ApiUser")
                        .WithMany("Logs")
                        .HasForeignKey("ApiUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItaLog.Domain.Models.Environment", "Environment")
                        .WithMany("Logs")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItaLog.Domain.Models.Level", "Level")
                        .WithMany("Logs")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
